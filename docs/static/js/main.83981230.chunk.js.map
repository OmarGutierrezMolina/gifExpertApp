{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","setResultados","resultados","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","id","type","value","onChange","target","placeholder","onClick","res","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,cAAeC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WAEvD,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KA8BA,OACI,qCACI,iDACA,sBAAMC,SAdO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IACzBV,GAAc,SAAAW,GAAI,OAAKP,GAAL,mBAAoBO,OACtCC,QAAQC,IAAIN,GACZF,EAAc,MASd,SACI,uBACIS,GAAG,OACHC,KAAK,OACLC,MAAOZ,EACPa,SAlCU,SAACV,GACvBF,EAAcE,EAAEW,OAAOF,QAkCXG,YAAY,+CAGpB,4EACA,wBAAQC,QA/BE,SAACb,GACZL,GAAY,GACXD,GAAc,SAACoB,GAAD,OAAOA,EAAI,MA6BzB,gBACA,iCAASnB,IACT,wBAAQkB,QArCE,SAACb,GACfN,GAAc,SAACoB,GAAD,OAAOA,EAAI,MAoCrB,oB,+BClDCC,EAAO,uCAAG,WAAMC,EAAUrB,GAAhB,uBAAAsB,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,kBACgEG,UAAUxB,GAD1E,sDAEIyB,MAAMF,GAFV,cAEbG,EAFa,gBAGEA,EAASC,OAHX,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHnB,GAAGmB,EAAInB,GACPoB,MAAMD,EAAIC,MACVT,IAAG,UAACQ,EAAIE,cAAL,aAAC,EAAYC,iBAAiBX,QATtB,kBAcZM,GAdY,4CAAH,wDCEPM,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAMT,EAAU,EAAVA,IAEhC,OACI,sBAAKa,UAAU,6CAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAA4B,IAA3BlB,EAA0B,EAA1BA,SAErB,ECHwB,SAACA,EAAUrB,GACnC,MAA0BC,mBAAS,CAC/B2B,KAAK,GACLY,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WACNvB,EAAQC,EAASrB,GACZ4C,MAAK,SAAAC,GAGFH,EAAS,CACLd,KAAKiB,EACLL,SAAQ,SAItB,CAACnB,IAGIoB,EDjBuBK,CAAazB,EAFI,EAAhBrB,YAEnBiC,EAAZ,EAAOL,KAAYY,EAAnB,EAAmBA,QAEnB,OACI,qCACA,oBAAIJ,UAAU,wCAAd,SAAuDf,IACtDmB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOH,KAAI,SAAAiB,GAAK,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAMnC,aEbtBoC,EAAe,WAExB,MAAoC/C,mBAAS,CAAC,kBAA9C,mBAAOgD,EAAP,KAAmBnD,EAAnB,KACA,EAAoCG,mBAAS,GAA7C,mBAAOD,EAAP,KAAmBD,EAAnB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaD,cAAiBA,EAAeC,cAAiBA,EAAeC,WAAYA,IACzF,uBAEA,6BAEQiD,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,EACZrB,WAAcA,GAFTqB,Y,MCjBjC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.83981230.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories, setResultados, resultados}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // const [resultados, setResultados] = useState(5);\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleAdd = (e)=>{\r\n        setResultados((res)=>res+1);\r\n    }\r\n\r\n    const handleSus = (e)=>{\r\n        if(resultados>=2){\r\n            setResultados((res)=>res-1);\r\n        }\r\n        \r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length>2){\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            console.log(e);\r\n            setInputValue('');\r\n        }\r\n        // console.log('Submit hecho');\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p>BUSQUEDA DE GIFS</p>\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                    id=\"gifs\"\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"ESCRIBE AQUI LOS GIFS QUE QUIERES BUSCAR\"\r\n                />\r\n            </form>\r\n            <p>Â¿Cuantos resultados te interesa obtener?</p>\r\n            <button onClick={handleSus}>-1</button>\r\n            <button>{resultados}</button>\r\n            <button onClick={handleAdd}>+1</button>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n","export const getGifs = async(category, resultados) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${encodeURI(resultados)}&api_key=Y2Fvyji5IrUnMTWgl3aeQZTm1EvNM2Cb`;\r\n    const response = await fetch(url);\r\n    const {data} = await response.json();\r\n\r\n    const gifs = data.map(img =>{\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    // console.log(gifs);\r\n    // setImages(gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title,url} ) => {\r\n    // console.log({id,title,url});\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInLeft\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/GetGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category, resultados}) => {\r\n\r\n    const {data:images,loading} = useFetchGifs(category, resultados);\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeInDown\">{category}</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n\r\n        <div className=\"card-grid\">\r\n            {\r\n                images.map(image =>(\r\n                    <GifGridItem \r\n                        key={image.id}\r\n                        {...image}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/GetGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category, resultados) =>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category,resultados)\r\n            .then(imgs => {\r\n                // setTimeout(()=>{\r\n                    // console.log(imgs);\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false,\r\n                })\r\n                // },1500)\r\n            })\r\n    },[category])\r\n\r\n\r\n    return state; //loading en true\r\n}","import React,{useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categories = ['SNK', 'Toradora', 'One Piece']\r\n    const [categories, setCategories] = useState(['Levi Ackerman'])\r\n    const [resultados, setResultados] = useState(5);\r\n\r\n    // const handleAdd = () =>{\r\n    //     const agregar = 'One Punch';\r\n    //     setCategories(cats => [...cats,agregar]);\r\n    // }\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories} setResultados = {setResultados} resultados={resultados}/>\r\n            <hr></hr>\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid\r\n                            key={category} \r\n                            category = {category}\r\n                            resultados = {resultados}\r\n                        />))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}